
//////////////////////////////////////////////////
                ITTARA CONFIG V0.1
//////////////////////////////////////////////////

// |Single| 'MOUSE' |Single|
sensitivity "1.5" // <-> Normal sensitivity

zoom_sensitivity_ratio "1.0" // <-> Scoped sensitivity

m_pitch "0.022" // <-> Vertical speed sensitivity multiplier (Y-axis).

m_yaw "0.022" // <-> Horizontal speed sensitivity multiplier (X-axis).


// |Single| 'CROSSHAIR' |Single|

// <> Values: 
// 0: Disabled
// 1: Enabled
crosshair "1" // <-> Enable/Disable crosshair

// <> Values:
// 0: Scaleform Default     - Large dynamic Scaleform Crosshair (only cl_crosshaircolor can customize).
// 1: Scaleform Small       - Small static Scaleform Crosshair (only cl_crosshaircolor and cl_fixedcrosshairgap can customize).
// 2: Classic               - Crosshair is slighter dynamic when moving and gives separated feedback when firing (accurate spread feedback with a fixed inner).
// 3: Classic Dynamic       - Crosshair is very dynamic when moving and gives smooth feedback when firing (accurate spread feedback).
// 4: Classic Static        - Crosshair is static on movement and when firing weapons.
// 5: Classic Dynamic '1.6' - Crosshair is static when moving and expands smoother when firing (fake recoil - inaccurate feedback).
cl_crosshairstyle "4"

// <> Values: 
// 0: Disabled
// 1: Enabled
cl_crosshair_recoil "1" // <-> Crosshair will follow weapon recoil

cl_crosshairsize "1" // <-> Crosshair size

// <i> Also, changes the size of the dot if "cl_crosshairdot 1"
cl_crosshairthickness "3.5" // <-> Crosshair thickness

// <> Values: 
// 0: Disabled
// 1: Enabled
cl_crosshairdot "0" // <-> Crosshair Dot

// <> Values: 
// 0: Disabled
// 1: Enabled
// <!> Works only with "cl_crosshairstyle" from "2" to "5"
cl_crosshair_t "0" // <-> Removes the upper crosshair line

// <> Values: 
// 0: Disabled
// 1: Enabled
cl_crosshair_drawoutline "0" // <-> Crosshair Outline

cl_crosshair_outlinethickness "2" // <-> Crosshair outline thickness

// <> Values: 
// 0: Disabled
// 1: Enabled
cl_crosshairgap_useweaponvalue "0" // <-> Crosshair gap will dynamically change depending on equiped weapon

cl_crosshairgap "-4.5" // <-> Crosshair gap size

// <!> Works only with "cl_crosshairstyle 1"
cl_fixedcrosshairgap "-2" // <-> Crosshair fixed gap size

// <> Values:
// 0: Half transparent crosshair
// 1: Set transparency through "cl_crosshairalpha"
cl_crosshairusealpha "1" // <-> Transparency of corsshair lines

// <> Values:
// 0: Complete transparent.
// 255: Total solid.
cl_crosshairalpha "185" // <-> Transparency value of corsshair lines

// <> Values:
// Scaleform: 0=###       1=Green     2=Yellow    3=Blue      4=Cyan      5=Red
// Classic:   0=Red       1=Green     2=Yellow    3=Blue      4=Cyan      5=Custom
cl_crosshaircolor "5" // <-> Crosshair color

// Color palette.
// 
// <!> Works only with "cl_crosshaircolor 5"
// <i> Also, affect the color of the ACOG dot (scoped in AUG/SG553).
//
// * RED
cl_crosshaircolor_R "0"
// * GREEN
cl_crosshaircolor_G "255"
// * BLUE
cl_crosshaircolor_B "0"

// <> Values:
// 0: Disabled
// 1: Only on default crosshair styles ("cl_crosshairstyle" - "0" or "1")
// 2: Always enabled
cl_crosshair_friendly_warning "1" // <-> Show friendly warning

// <> Values:
// 0: Show player crosshair
// 1: Show player crosshair only when bot can be taken over, otherwise show default
// 2: Always show default crosshair for bots
cl_observed_bot_crosshair "1" // <-> Control the crosshair shown when observing a bot

// <> Values:
//  1: Single-pixel hairline
// >1: +1 extra width per number
cl_crosshair_sniper_width "1" // <-> Sniper scope cross lines width

// <> Values:
// Inner = cl_crosshairsize * (1 - cl_crosshair_dynamic_maxdist_splitratio)
// Outer = cl_crosshairsize * cl_crosshair_dynamic_maxdist_splitratio
//
// <!> Works only with cl_crosshairstyle "2"
cl_crosshair_dynamic_maxdist_splitratio "2" // <-> The ratio used to decide how long the inner and outer crosshair lines will be

// <!> Works only with "cl_crosshairstyle 2"
cl_crosshair_dynamic_splitalpha_innermod "0" // <-> The alpha modification that will be used for the inner crosshair lines once they´ve split

// <!> Works only with "cl_crosshairstyle 2"
cl_crosshair_dynamic_splitalpha_outermod "1" // <-> The alpha modification that will be used for the outer crosshair lines once they´ve split

// <!> Works only with "cl_crosshairstyle 2"
cl_crosshair_dynamic_splitdist "3" // <-> The distance that the crosshair lines will split into 2 (when firing a weapon or during movement)


// |Single| 'AUDIO' |Single|

volume "0.72" // <-> Game Volume

// >> Changes overall sound coloration. Can help offset sound coloration
// caused by various hardware and software combinations
//
// <> >> Values:
// 0: Natural;
//    Default
//
// 1: Crisp;
//    Enhances mid and high frequency bands. Can help with sound localization
//    and reduce muffling. May sound harsh in certain situations
//
// 2: Smooth;
//    Reduces mid to high frequencies. Can help reduce harshness, volume
//    spikes, and ear fatigue during long play sessions. Ideal for studio
//    grade headphones and players that listen at louder volumes
snd_headphone_eq "2" // <-> Headphone EQ Preset

// <> >> Values:
// 0: Physically Accurate;
//    Physically modeled sound panning behavior most
//    accurately reflecting the emitter position.
// /\
// ||
// \/
//
// 1: Isolated L/R; 
//    Sound emitters that are directly to the side of the player will be hard panned with 
//    minimal blending into the opposite L/R channel. This provides a strong sense of
//    left vs. right but can be positionally misleading at certain angles to the 
//    listener. For players who prefer legacy sound panning behaviour.
//
// <i> A higher value directs sounds proportionally to come exclusively from a certaindirection, 
// in a binary manner, while lower values reverberate the sound in a natural 3D way.
snd_spatialize_lerp "0" // <-> L/R isolation

// <> >> Values:
// 0: Disabled; 
//    Sound emitters at the edge of the field of view will sound strongly 
//    panned to either L or R respectively. Ideal for those who play very close to 
//    the screen, or use wearable screens, or players that prefer legacy sound 
//    engines. Can be positionally misleading at ceratin angles to the listener.
//
// 1: Enabled;
//    Sound sources will be rendered accurately with respect to the 
//    field of view when looking at the pc screen. Sound emitters 
//    that are on the edge of the field of view will sound slightly 
//    in front. Sound emitters that are off-screen and directly to 
//    the side will sound fully panned to either L or R respectively.
snd_steamaudio_enable_perspective_correction "1" // <-> Perspective correction for 3D audio

snd_steamaudio_reverb_level_db "-3" // <-> Adjust overall volume (dB) of the output from Steam Audio Reverb processor

// <!> Disabling it may induce undesirable effects such as audio dropouts.
snd_autodetect_latency "1" // <-> Automatic buffer latency detection (requires driver support)

// <!> Any higher value may bug the sound.
snd_mixahead "0.001" // <-> Regulates the time given to the audio system to process sound

snd_menumusic_volume "0" // <-> Relative volume of the main menu music

snd_roundstart_volume "0" // <-> Relative volume of round start music

snd_roundend_volume "0" // <-> Relative volume of round end music

snd_mapobjective_volume "0" // <-> Relative volume of map objective music

snd_deathcamera_volume "0" // <-> Relative volume of the death camera music

// <i> Helps as a timer mechanism to know when the bomb explodes, thus knowing if there is time to defuse.
snd_tensecondwarning_volume "0.05" // <-> Relative volume of ten second warning music

snd_mvp_volume "0.05" // <-> Relative volume of the MVP music

// <i> Helps to hear steps after the round ended.
snd_mute_mvp_music_live_players "1" // <-> Mute MVP music if players from both teams are still alive

snd_mute_losefocus "1" // <-> Disables the game sound when the game loses focus (tabbed out)

// <i> May be used in combination with the command "play"
snd_toolvolume "0.3" // <->  Volume of sounds in tools (e.g. Hammer, SFM)

cl_embedded_stream_audio_volume "0" // <-> Embedded stream audio volume

cl_embedded_stream_audio_volume_xmaster "1" // <-> Multiply embedded stream audio volume via master volume

// <i> Adjusts the overall volume of all voice communication in the game.
snd_voipvolume "1" // <-> Volume level of incoming voice

cl_mute_enemy_team "0" // <-> Block all communication from players on the enemy team

// <> Values:
// 0: Disabled
// 1: Apply for non-competitive game modes
// 2: Apply for all modes
cl_mute_all_but_friends_and_party "0" // <-> Only allow communication from friends and matchmaking party members

cl_clutch_mode "0" // <-> Silence voice and other distracting sounds until the end of round or next death

// <-> If a microphone is connected, a feedback sound will play (mirrored sound)
voice_loopback "0" // <-> Listen to the connected device through the microphone jack

// <-> Sound level required to pick up sound.
voice_threshold "-110" // <-> Microphone sensitivity (decibel threshold) when using voice activation instead of "Push-to-talk"

voice_threshold_attack "0.3" // <-> Duration of buffering outgoing audio to detect an onset

voice_threshold_delay "0.7" // <-> Duration in which detects if the talker is silent before resulting as no talking

voice_threshold_hold "0.2" // <-> Duration of listening the the input singal (talking) regardless of the loudness

voice_modenable "1" // <-> Toggle the microphone

// <!> Could potentially solve the microphone transmission issue
voice_always_sample_mic "1" // <-> Streamlined Push to Talk

voice_device_override "0" // <-> Default device used for voice capture

// |Single| 'NETWORK' |Single|

// <> Values:
// [MIN] 0.7 Mbps:  98304
//   |   1.0 Mbps: 131072
//   |   1.5 Mbps: 196608
//   |   2.0 Mbps: 262144
//   |   2.5 Mbps: 327680
//   |   3.0 Mbps: 393216
//   |   4.0 Mbps: 524288
//   |   5.0 Mbps: 655360
//   |   6.0 Mbps: 786432
// [MAX] 7.6 Mbps: 1000000
//
// <!> The cvar value "1000000" wrongly reports the bandwidth in-game as "Extremely restricted" when in fact it should be the highest one
rate "1000000" // <-> Max bytes/sec the host can receive data

// <> Values:
// 0: Deactivates the entity interpolation. For a stable connection (near to none packet loss)
// 1: Reduces entity interpolation times to a minimum. When experiencing a light loss or choke (light packet loss)
// 2: Interpolate over 2 snapshots to avoid issues where one snapshot is dropped once in a while. When experiencing a heavy loss or choke (high packet loss)
//
// <i> Common interpolation values calculated:
// Tickrate  64: cl_interp_ratio 0 / cl_updaterate 64  = lerp  0.000 ->  ~0.0ms interpolation time;
// Tickrate  64: cl_interp_ratio 1 / cl_updaterate 64  = lerp 15.625 -> ~15.6ms interpolation time;
// Tickrate  64: cl_interp_ratio 2 / cl_updaterate 64  = lerp 31.250 -> ~31.3ms interpolation time;
//
// <i> Extrapolation is performed by a game client when it encounters a lack of information from the server and insufficient interpolation history
// to estimate appropriate substitute values for the missing data. In such cases, the game client resorts to the least unfavorable option: it
// assumes that all objects will maintain their current direction and move in a perfectly straight line. However, this simplistic assumption
// rarely aligns with the actual movement of objects in reality. Consequently, when the next server update arrives, there are abrupt movements
// as objects suddenly relocate to their intended positions, resulting in noticeable jerks
//
// >> Buffer snapshots from the server and commands from the client
// <i> >> It decreases the amount of stuttering caused by packet loss but increases the effective ping time
// <!> >> Controls the value of "cl_interp_ratio" and by default "cl_interp", which should not be modified directly
cl_net_buffer_ticks "0" // <-> Number of ticks of delay for server snapshots and user commands

// <> Values:
//  0: Use the connect method requested by GC
// >0: Always use SDR if possible
// <0: Always use direct UDP if possible
net_client_steamdatagram_enable_override "1" // <-> Makes the client to select a relay and communicate through that relay

mm_session_search_qos_timeout "20" // <-> Quality of Service timeout (no response) in seconds

// >> Allows specifying max acceptable matchmaking ping when searching for a game on official matchmaking servers
// <i> >> If there are official servers satisfying the ping setting, the matchmaking will always connect in a match hosted on those servers
// <i> >> If there are no official servers near, the matchmaking will connect in a match hosted on the next nearest official server with a higher ping
mm_dedicated_search_maxping "40" // <-> Longest preferred ping to dedicated servers for games

mm_csgo_community_search_players_min "3" // <-> When performing CS2 community matchmaking look for servers with at least so many human players

// <!> Works only before joining a server
cl_resend "0.5" // <-> Delay in seconds before the client will resend the "connect" attempt

cl_timeout "999" // <-> Delay in seconds without receiving a packet from the server before the client will disconnect itself

// <> Values:
// 0: Private
// 1: Public
lobby_default_privacy_bits2 "0" // <-> Lobby default permissions

// <> Values:
// 0: Disabled
// 1: Last
// 2: Auto
ui_setting_advertiseforhire_auto "2" // <-> Users automatically advertise for invites

// <> Values:
// 0: None - Friends can join the game only when they get an invite
// 1: Official servers - Friends can join the game only on official servers
// 2: All servers - Friends can join the game on official and community servers
cl_join_advertise "2" // <-> Advertise joinable game in progress to Steam friends, otherwise need a Steam invite

cl_invites_only_friends "0" // <-> Ignore in-game invites from recent teammates or other non-friends

cl_invites_only_mainmenu "0" // <-> Ignore all invites when user is playing a match

// |Single| 'VIDEO' |Single|

// <i> A lower value enable the player to seek the enemies in dark corners
//
// <> Values:
// 1.6: Highest brightness
// |
// 2.6: Lowest brightness
r_fullscreen_gamma "2.2" // <-> Screen Gamma (only in fullscreen modes)

// <-> The primary benefit of a frame rate cap is to make the frame rate more stable. A moderate,
// consistent frame rate is much more desirable than a variable but sometimes high frame rate.
// Frames generated, higher than the monitor refresh rate are still useful, providing a more stable gameplay.
//
// <!> Limiting the frame rate can be used to work around bugs and other effects on extremely high frame rates.
// <i> A higher value can increase the smoothness but at the same time can eat more power.
fps_max "300" // <-> Frame rate limiter

// <i> Same as "fps_max" but works only for the main menu.
fps_max_ui "144" // <-> Frame rate limiter while the game UI is displayed

fps_max_tools "144" // <-> Additional frame rate limit while in tools mode and a window other than the game window in focus

// <-> By default, the engine calculates the time between frames before it processes the client tick. This can lead to a situation where 
// the player´s position is from a delayed point in time, even though their inputs are more up-to-date. This command moves the function 
// responsible for sleeping after the tick processing. This means that the sleep will be shorter because the tick processing will be 
// included in the time delta, resulting in increased responsiveness of the game and a reduced amount of texture stuttering.
//
// <!> Works in conjunction with "r_low_latency" enabled (NVIDIA Low Latency).
// <!> Should benefit from a frame per second limitation (capped "fps_max").
// <i> Implemented with the scope of frametime consistency.
// <i> Due to its intended mechanism, it may induce roughness (non-smoothness) during the gameplay. Be advised! It should be tested on everyone´s case-scenario.
engine_low_latency_sleep_after_client_tick "1" // <-> Moves the low latency sleep on tick frames to happen after client simulation

// <-> Usually, when tab out of CS2, the engine will sleep for a set amount of milliseconds (repeatedly) to reduce power and resource usage.
//
// <i> Higher value can reduce CPU load and save power but there will be frame rate drops when tabbing and sound distortions if "snd_mute_losefocus 0".
// <i> Decreases the frame rates and produces lag on any locally hosted servers when tabbing out.
// <i> A lower value (or disable value) is recommended for streaming and local hosts.
engine_no_focus_sleep "30" // <-> Controls the time the engine sleeps per frame when the game is not in focus








